Index: app/src/main/java/com/specknet/pdiotapp/live/LiveDataActivity.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.specknet.pdiotapp.live\n\nimport android.content.BroadcastReceiver\nimport android.content.Context\nimport android.content.Intent\nimport android.content.IntentFilter\nimport android.content.res.AssetFileDescriptor\nimport android.os.Bundle\nimport android.os.Handler\nimport android.os.HandlerThread\nimport android.os.Looper\nimport android.util.Log\nimport android.widget.TextView\nimport androidx.appcompat.app.AppCompatActivity\nimport androidx.core.content.ContextCompat\nimport com.github.mikephil.charting.charts.LineChart\nimport com.github.mikephil.charting.data.Entry\nimport com.github.mikephil.charting.data.LineData\nimport com.github.mikephil.charting.data.LineDataSet\nimport com.github.mikephil.charting.interfaces.datasets.ILineDataSet\nimport com.specknet.pdiotapp.R\nimport com.specknet.pdiotapp.utils.Constants\nimport com.specknet.pdiotapp.utils.RESpeckLiveData\nimport com.specknet.pdiotapp.utils.ThingyLiveData\nimport org.tensorflow.lite.Interpreter\nimport java.io.FileInputStream\nimport java.nio.MappedByteBuffer\nimport java.nio.channels.FileChannel\n\n\nclass LiveDataActivity : AppCompatActivity() {\n\n    val respeckBuffer = ArrayList<FloatArray>()  // Buffer for Respeck data\n    val thingyBuffer = ArrayList<FloatArray>()   // Buffer for Thingy data\n\n    val WINDOW_SIZE = 50  // Define the window size as 50\n\n    // global graph variables\n    lateinit var dataSet_res_accel_x: LineDataSet\n    lateinit var dataSet_res_accel_y: LineDataSet\n    lateinit var dataSet_res_accel_z: LineDataSet\n\n    lateinit var dataSet_thingy_accel_x: LineDataSet\n    lateinit var dataSet_thingy_accel_y: LineDataSet\n    lateinit var dataSet_thingy_accel_z: LineDataSet\n\n    var time = 0f\n    lateinit var allRespeckData: LineData\n\n    lateinit var allThingyData: LineData\n\n    lateinit var respeckChart: LineChart\n    lateinit var thingyChart: LineChart\n\n    // global broadcast receiver so we can unregister it\n    lateinit var respeckLiveUpdateReceiver: BroadcastReceiver\n    lateinit var thingyLiveUpdateReceiver: BroadcastReceiver\n    lateinit var looperRespeck: Looper\n    lateinit var looperThingy: Looper\n\n    val filterTestRespeck = IntentFilter(Constants.ACTION_RESPECK_LIVE_BROADCAST)\n    val filterTestThingy = IntentFilter(Constants.ACTION_THINGY_BROADCAST)\n\n    // Function to load the model file\n    fun loadModelFile(): MappedByteBuffer {\n        val fileDescriptor: AssetFileDescriptor = assets.openFd(\"model.tflite\")\n        val inputStream = FileInputStream(fileDescriptor.fileDescriptor)\n        val fileChannel: FileChannel = inputStream.channel\n        val startOffset: Long = fileDescriptor.startOffset\n        val declaredLength: Long = fileDescriptor.declaredLength\n        return fileChannel.map(FileChannel.MapMode.READ_ONLY, startOffset, declaredLength)\n    }\n\n    private fun getDetectedActivityIndex(output: FloatArray): Int {\n        var maxProbability = -1f\n        var activityIndex = -1\n        for (i in output.indices) {\n            if (output[i] > maxProbability) {\n                maxProbability = output[i]\n                activityIndex = i\n            }\n        }\n        return activityIndex // Returns the index of the highest probability\n    }\n\n\n    val model = loadModelFile()\n\n    // Initialize the TensorFlow Lite interpreter\n    lateinit var interpreter: Interpreter\n\n//    val interpreter = Interpreter(model)\n\n\n    override fun onCreate(savedInstanceState: Bundle?) {\n        super.onCreate(savedInstanceState)\n        setContentView(R.layout.activity_live_data)\n\n        setupCharts()\n\n        // set up the broadcast receiver\n        respeckLiveUpdateReceiver = object : BroadcastReceiver() {\n            override fun onReceive(context: Context, intent: Intent) {\n\n                Log.i(\"thread\", \"I am running on thread = \" + Thread.currentThread().name)\n\n                val action = intent.action\n\n                if (action == Constants.ACTION_RESPECK_LIVE_BROADCAST) {\n\n                    val liveData =\n                        intent.getSerializableExtra(Constants.RESPECK_LIVE_DATA) as RESpeckLiveData\n                    Log.d(\"Live\", \"onReceive: liveData = \" + liveData)\n\n                    // get all relevant intent contents\n                    val x = liveData.accelX\n                    val y = liveData.accelY\n                    val z = liveData.accelZ\n\n                    time += 1\n                    updateGraph(\"respeck\", x, y, z)\n\n                    val respeckData = floatArrayOf(x, y, z)\n                    respeckBuffer.add(respeckData)\n\n                    // If the buffer is full, run the model\n                    if (respeckBuffer.size == WINDOW_SIZE) {\n                        // Run the model\n\n                        // Prepare a 3D input array with shape [1, 50, 3]\n//                        val input = Array(1) { Array(50) { FloatArray(3) } }\n\n                        // Fill the input array with data from respeckBuffer\n                        // Custom input data with shape [1, 50, 3]\n                        val input = arrayOf(\n                            arrayOf(\n                                floatArrayOf(-0.9140625f, -0.23828125f, -0.0234375f),\n                                floatArrayOf(-0.96484375f, -0.28320312f, -0.068359375f),\n                                floatArrayOf(-0.9873047f, -0.2685547f, -0.049804688f),\n                                floatArrayOf(-0.97753906f, -0.24414062f, -0.08691406f),\n                                floatArrayOf(-0.9638672f, -0.21972656f, -0.087890625f),\n                                floatArrayOf(-0.95996094f, -0.2265625f, -0.06640625f),\n                                floatArrayOf(-1.0009766f, -0.18359375f, -0.15234375f),\n                                floatArrayOf(-1.0625f, -0.18261719f, -0.17285156f),\n                                floatArrayOf(-1.0888672f, -0.23828125f, -0.18847656f),\n                                floatArrayOf(-1.1962891f, -0.27246094f, -0.18554688f),\n                                floatArrayOf(-1.2949219f, -0.2626953f, -0.19042969f),\n                                floatArrayOf(-1.2666016f, -0.15332031f, -0.21972656f),\n                                floatArrayOf(-1.1689453f, -0.036132812f, -0.22070312f),\n                                floatArrayOf(-0.9951172f, -0.0009765625f, -0.203125f),\n                                floatArrayOf(-0.95703125f, 0.028320312f, -0.17675781f),\n                                floatArrayOf(-1.0097656f, -0.025390625f, -0.16699219f),\n                                floatArrayOf(-0.9746094f, -0.041015625f, -0.119140625f),\n                                floatArrayOf(-0.9873047f, -0.0234375f, -0.08300781f),\n                                floatArrayOf(-1.0224609f, -0.06640625f, -0.04296875f),\n                                floatArrayOf(-1.0498047f, -0.115234375f, -0.029296875f),\n                                floatArrayOf(-1.0283203f, -0.17089844f, -0.0107421875f),\n                                floatArrayOf(-0.9628906f, -0.13183594f, 0.020507812f),\n                                floatArrayOf(-0.87109375f, -0.059570312f, 0.07519531f),\n                                floatArrayOf(-0.89941406f, 0.022460938f, 0.05859375f),\n                                floatArrayOf(-0.8339844f, -0.009765625f, 0.09277344f),\n                                floatArrayOf(-0.7841797f, -0.06738281f, 0.12792969f),\n                                floatArrayOf(-0.87109375f, -0.10449219f, 0.15039062f),\n                                floatArrayOf(-0.9121094f, -0.103515625f, 0.14355469f),\n                                floatArrayOf(-0.9501953f, -0.07324219f, 0.14550781f),\n                                floatArrayOf(-0.95214844f, -0.06542969f, 0.20019531f),\n                                floatArrayOf(-0.91503906f, -0.099609375f, 0.22363281f),\n                                floatArrayOf(-0.9765625f, -0.057617188f, 0.15625f),\n                                floatArrayOf(-1.1230469f, -0.018554688f, 0.09277344f),\n                                floatArrayOf(-1.1826172f, -0.10253906f, 0.109375f),\n                                floatArrayOf(-1.0791016f, -0.018554688f, 0.11621094f),\n                                floatArrayOf(-1.109375f, -0.0703125f, 0.21582031f),\n                                floatArrayOf(-1.1201172f, -0.005859375f, 0.17382812f),\n                                floatArrayOf(-1.1982422f, 0.064453125f, 0.119140625f),\n                                floatArrayOf(-1.0527344f, 0.07714844f, 0.018554688f),\n                                floatArrayOf(-0.9951172f, 0.053710938f, -0.00390625f),\n                                floatArrayOf(-1.0175781f, -0.021484375f, -0.078125f),\n                                floatArrayOf(-1.0351562f, -0.043945312f, -0.17382812f),\n                                floatArrayOf(-1.0332031f, 0.0390625f, -0.15234375f),\n                                floatArrayOf(-0.9375f, 0.09472656f, -0.10449219f),\n                                floatArrayOf(-0.91796875f, 0.06542969f, -0.091796875f),\n                                floatArrayOf(-0.9423828f, -0.0146484375f, -0.08105469f),\n                                floatArrayOf(-0.9550781f, -0.12011719f, -0.1015625f),\n                                floatArrayOf(-0.9160156f, -0.22558594f, -0.10546875f),\n                                floatArrayOf(-0.8720703f, -0.20117188f, -0.1171875f),\n                                floatArrayOf(-0.94433594f, -0.12890625f, -0.0703125f)\n                            )\n                        )\n\n\n                        // Prepare the output array with size 11 (for 11 output classes)\n                        val output = FloatArray(11)\n                        interpreter = Interpreter(model)\n                        interpreter.run(input, output)\n                        // Process the output to find the most probable class\n//                        val detectedActivityIndexRes = getDetectedActivityIndex(output)\n                        val detectedActivityIndexRes = \"test\"\n                        Log.d(\"Model\", \"Detected Activity Index Res: $detectedActivityIndexRes\")\n\n                        runOnUiThread {\n                            findViewById<TextView>(R.id.respeck_activity_text_view).text = \"Current Activity: $detectedActivityIndexRes\"\n                        }\n                        respeckBuffer.clear()\n\n\n                    }\n\n\n                }\n            }\n        }\n\n        // register receiver on another thread\n        val handlerThreadRespeck = HandlerThread(\"bgThreadRespeckLive\")\n        handlerThreadRespeck.start()\n        looperRespeck = handlerThreadRespeck.looper\n        val handlerRespeck = Handler(looperRespeck)\n        this.registerReceiver(respeckLiveUpdateReceiver, filterTestRespeck, null, handlerRespeck)\n\n        // set up the broadcast receiver\n        thingyLiveUpdateReceiver = object : BroadcastReceiver() {\n            override fun onReceive(context: Context, intent: Intent) {\n\n                Log.i(\"thread\", \"I am running on thread = \" + Thread.currentThread().name)\n\n                val action = intent.action\n\n                if (action == Constants.ACTION_THINGY_BROADCAST) {\n\n                    val liveData =\n                        intent.getSerializableExtra(Constants.THINGY_LIVE_DATA) as ThingyLiveData\n                    Log.d(\"Live\", \"onReceive: liveData = \" + liveData)\n\n                    // get all relevant intent contents\n                    val x = liveData.accelX\n                    val y = liveData.accelY\n                    val z = liveData.accelZ\n\n                    time += 1\n                    updateGraph(\"thingy\", x, y, z)\n\n                    val thingyData = floatArrayOf(x, y, z)\n                    thingyBuffer.add(thingyData)\n\n                    if (thingyBuffer.size == WINDOW_SIZE) {\n\n//                        // Prepare a 3D input array with shape [1, 50, 3]\n//                        val input_thingy = Array(1) { Array(50) { FloatArray(3) } }\n//\n//                        // Fill the input array with data from respeckBuffer\n//                        for (i in 0 until 50) {\n//                            input_thingy[0][i][0] = respeckBuffer[i][0] // x value\n//                            input_thingy[0][i][1] = respeckBuffer[i][1] // y value\n//                            input_thingy[0][i][2] = respeckBuffer[i][2] // z value\n//                        }\n//\n//                        // Prepare the output array with size 11 (for 11 output classes)\n//                        val output_thingy = FloatArray(11)\n//\n//                        interpreter.run(input_thingy, output_thingy)\n                        // Process the output to find the most probable class\n//                        val detectedActivityIndexThingy = getDetectedActivityIndex(output_thingy)\n                        val detectedActivityIndexThingy = \"test\"\n//                        Log.d(\"Model\", \"Detected Activity Index Thingy: $detectedActivityIndexThingy\")\n\n                        runOnUiThread {\n                            findViewById<TextView>(R.id.thingy_activity_text_view).text = \"Current Activity: $detectedActivityIndexThingy\"\n                        }\n                        thingyBuffer.clear()\n\n                    }\n                }\n            }\n        }\n\n        // register receiver on another thread\n        val handlerThreadThingy = HandlerThread(\"bgThreadThingyLive\")\n        handlerThreadThingy.start()\n        looperThingy = handlerThreadThingy.looper\n        val handlerThingy = Handler(looperThingy)\n        this.registerReceiver(thingyLiveUpdateReceiver, filterTestThingy, null, handlerThingy)\n\n    }\n\n\n    fun setupCharts() {\n        respeckChart = findViewById(R.id.respeck_chart)\n        thingyChart = findViewById(R.id.thingy_chart)\n\n        // Respeck\n\n        time = 0f\n        val entries_res_accel_x = ArrayList<Entry>()\n        val entries_res_accel_y = ArrayList<Entry>()\n        val entries_res_accel_z = ArrayList<Entry>()\n\n        dataSet_res_accel_x = LineDataSet(entries_res_accel_x, \"Accel X\")\n        dataSet_res_accel_y = LineDataSet(entries_res_accel_y, \"Accel Y\")\n        dataSet_res_accel_z = LineDataSet(entries_res_accel_z, \"Accel Z\")\n\n        dataSet_res_accel_x.setDrawCircles(false)\n        dataSet_res_accel_y.setDrawCircles(false)\n        dataSet_res_accel_z.setDrawCircles(false)\n\n        dataSet_res_accel_x.setColor(\n            ContextCompat.getColor(\n                this,\n                R.color.red\n            )\n        )\n        dataSet_res_accel_y.setColor(\n            ContextCompat.getColor(\n                this,\n                R.color.green\n            )\n        )\n        dataSet_res_accel_z.setColor(\n            ContextCompat.getColor(\n                this,\n                R.color.blue\n            )\n        )\n\n        val dataSetsRes = ArrayList<ILineDataSet>()\n        dataSetsRes.add(dataSet_res_accel_x)\n        dataSetsRes.add(dataSet_res_accel_y)\n        dataSetsRes.add(dataSet_res_accel_z)\n\n        allRespeckData = LineData(dataSetsRes)\n        respeckChart.data = allRespeckData\n        respeckChart.invalidate()\n\n        // Thingy\n\n        time = 0f\n        val entries_thingy_accel_x = ArrayList<Entry>()\n        val entries_thingy_accel_y = ArrayList<Entry>()\n        val entries_thingy_accel_z = ArrayList<Entry>()\n\n        dataSet_thingy_accel_x = LineDataSet(entries_thingy_accel_x, \"Accel X\")\n        dataSet_thingy_accel_y = LineDataSet(entries_thingy_accel_y, \"Accel Y\")\n        dataSet_thingy_accel_z = LineDataSet(entries_thingy_accel_z, \"Accel Z\")\n\n        dataSet_thingy_accel_x.setDrawCircles(false)\n        dataSet_thingy_accel_y.setDrawCircles(false)\n        dataSet_thingy_accel_z.setDrawCircles(false)\n\n        dataSet_thingy_accel_x.setColor(\n            ContextCompat.getColor(\n                this,\n                R.color.red\n            )\n        )\n        dataSet_thingy_accel_y.setColor(\n            ContextCompat.getColor(\n                this,\n                R.color.green\n            )\n        )\n        dataSet_thingy_accel_z.setColor(\n            ContextCompat.getColor(\n                this,\n                R.color.blue\n            )\n        )\n\n        val dataSetsThingy = ArrayList<ILineDataSet>()\n        dataSetsThingy.add(dataSet_thingy_accel_x)\n        dataSetsThingy.add(dataSet_thingy_accel_y)\n        dataSetsThingy.add(dataSet_thingy_accel_z)\n\n        allThingyData = LineData(dataSetsThingy)\n        thingyChart.data = allThingyData\n        thingyChart.invalidate()\n    }\n\n    fun updateGraph(graph: String, x: Float, y: Float, z: Float) {\n        // take the first element from the queue\n        // and update the graph with it\n        if (graph == \"respeck\") {\n            dataSet_res_accel_x.addEntry(Entry(time, x))\n            dataSet_res_accel_y.addEntry(Entry(time, y))\n            dataSet_res_accel_z.addEntry(Entry(time, z))\n\n            runOnUiThread {\n                allRespeckData.notifyDataChanged()\n                respeckChart.notifyDataSetChanged()\n                respeckChart.invalidate()\n                respeckChart.setVisibleXRangeMaximum(150f)\n                respeckChart.moveViewToX(respeckChart.lowestVisibleX + 40)\n            }\n        } else if (graph == \"thingy\") {\n            dataSet_thingy_accel_x.addEntry(Entry(time, x))\n            dataSet_thingy_accel_y.addEntry(Entry(time, y))\n            dataSet_thingy_accel_z.addEntry(Entry(time, z))\n\n            runOnUiThread {\n                allThingyData.notifyDataChanged()\n                thingyChart.notifyDataSetChanged()\n                thingyChart.invalidate()\n                thingyChart.setVisibleXRangeMaximum(150f)\n                thingyChart.moveViewToX(thingyChart.lowestVisibleX + 40)\n            }\n        }\n\n\n    }\n\n\n    override fun onDestroy() {\n        super.onDestroy()\n        unregisterReceiver(respeckLiveUpdateReceiver)\n        unregisterReceiver(thingyLiveUpdateReceiver)\n        looperRespeck.quit()\n        looperThingy.quit()\n    }\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/specknet/pdiotapp/live/LiveDataActivity.kt b/app/src/main/java/com/specknet/pdiotapp/live/LiveDataActivity.kt
--- a/app/src/main/java/com/specknet/pdiotapp/live/LiveDataActivity.kt	
+++ b/app/src/main/java/com/specknet/pdiotapp/live/LiveDataActivity.kt	
@@ -197,9 +197,9 @@
                         val detectedActivityIndexRes = "test"
                         Log.d("Model", "Detected Activity Index Res: $detectedActivityIndexRes")
 
-                        runOnUiThread {
-                            findViewById<TextView>(R.id.respeck_activity_text_view).text = "Current Activity: $detectedActivityIndexRes"
-                        }
+//                        runOnUiThread {
+//                            findViewById<TextView>(R.id.respeck_activity_text_view).text = "Current Activity: $detectedActivityIndexRes"
+//                        }
                         respeckBuffer.clear()
 
 
@@ -261,11 +261,11 @@
                         // Process the output to find the most probable class
 //                        val detectedActivityIndexThingy = getDetectedActivityIndex(output_thingy)
                         val detectedActivityIndexThingy = "test"
-//                        Log.d("Model", "Detected Activity Index Thingy: $detectedActivityIndexThingy")
+                        Log.d("Model", "Detected Activity Index Thingy: $detectedActivityIndexThingy")
 
-                        runOnUiThread {
-                            findViewById<TextView>(R.id.thingy_activity_text_view).text = "Current Activity: $detectedActivityIndexThingy"
-                        }
+//                        runOnUiThread {
+//                            findViewById<TextView>(R.id.thingy_activity_text_view).text = "Current Activity: $detectedActivityIndexThingy"
+//                        }
                         thingyBuffer.clear()
 
                     }
